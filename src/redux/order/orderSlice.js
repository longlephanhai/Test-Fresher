import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  cart: []
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.


export const orderSlice = createSlice({
  name: 'order',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addToCart: (state, action) => {
      const isExist = state.cart.findIndex(item => item._id === action.payload._id);
      if (isExist > -1) {
        state.cart[isExist].quantity += action.payload.quantity;
        if (state.cart[isExist].quantity > state.cart[isExist].detail.quantity) {
          state.cart[isExist].quantity = state.cart[isExist].detail.quantity;
        }
      } else {
        state.cart.push(action.payload);
      }
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // builder
    //   .addCase(incrementAsync.pending, (state) => {
    //     state.status = 'loading';
    //   })
    //   .addCase(incrementAsync.fulfilled, (state, action) => {
    //     state.status = 'idle';
    //     state.value += action.payload;
    //   });
  },
});

export const { addToCart } = orderSlice.actions;

export default orderSlice.reducer;
